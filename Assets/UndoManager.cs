//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Persistence;

public class UndoManager
{	
	Stack<SnapshotGroup> snapShotGroups = new Stack<SnapshotGroup>();
	public static UndoManager manager;
	public bool enabled = false;
	public bool haveAnyCardsMoved = false;
	static UndoManager ()
	{
		if(manager == null)
		{
			manager = new UndoManager();
		}
	}
	
	public void Undo()
	{
		if(snapShotGroups.Count > 0)
		{
			if(!UndoManager.manager.haveAnyCardsMoved) snapShotGroups.Pop();
			var group = snapShotGroups.Pop();
			group.Restore ();
		}
	}
	
	public void SaveState()
	{
		if(enabled)
		{
			if(!haveAnyCardsMoved) 
			{
				if(snapShotGroups.Count > 0) snapShotGroups.Pop ();
			}
			enabled = false;
			SnapshotGroup group = new SnapshotGroup();
			group.TakeSnapshot();
			snapShotGroups.Push(group);
			enabled = true;
			haveAnyCardsMoved = false;
		}
	}
}
public class SnapshotGroup
{
	public GameState state = GameState.HandEmpty;
	public int cardInHandIndex = -1;
	public List<ItemSnapshot> snapshots = new List<ItemSnapshot>();
	public void Restore()
	{
		Game.game.state =state;
		if(cardInHandIndex == -1)Game.game.cardInHand = null;
		else Game.game.cardInHand = CardManager.cardManager.cards[cardInHandIndex];
		foreach(var snapshot in snapshots)
		{
			snapshot.Restore ();
		}
	}
	public void TakeSnapshot()
	{
		state = Game.game.state;
		if(Game.game.cardInHand != null) cardInHandIndex = CardManager.cardManager.cards.IndexOf (Game.game.cardInHand);
		else cardInHandIndex = -1;
		foreach(Placeholder p in PlaceholderManager.manager.allPlaceholders)
		{
			
			snapshots.Add (GetPlaceholderSnapshot(p));
		}
	}
	protected PlaceholderSnapshot GetPlaceholderSnapshot(Placeholder placeholder)
	{
		PlaceholderSnapshot snapshot = new PlaceholderSnapshot();
		snapshot.Save (placeholder);
		return snapshot;
	}
}

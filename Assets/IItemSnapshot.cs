//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;


namespace Persistence
{
	[System.Serializable]
	public abstract class ItemSnapshot
	{
		public abstract void Restore();
		public int id = 0;
		public int index = 0;
	}
	[System.Serializable]
	public class CardSnapshot:ItemSnapshot
	{
		override public void Restore()
		{
			throw new NotImplementedException();
		}
		public Card GetRestoreCard()
		{
			Card card = CardManager.cardManager.cards[index];
			card.status = this.cardStatus;
			card.points = this.points;
			card.tempPoints = this.tempPoints;
			card.isInZodiacSequence = this.isInZodiacSequence;
			card.substituteSuit = this.substituteSuit;
			card.substituteRank = this.substituteRank;
			card.substituteZodiac = this.substituteZodiac;
			if(card.isFacingUp && !wasFacingUp)
			{
				card.FlipDown();
			}
			
			return card;
		}
	 	public CardSnapshot Save(Card card)
		{
			this.cardStatus = card.status;
			this.index = CardManager.cardManager.cards.IndexOf(card);
			this.points = card.points;
			this.tempPoints = card.tempPoints;
			
			this.substituteSuit = card.substituteSuit;
			this.substituteRank = card.substituteRank;
			this.substituteZodiac = card.substituteZodiac;
			this.isInZodiacSequence = card.isInZodiacSequence;
			this.wasFacingUp = card.isFacingUp;
			if(card.parentPlaceholder is Discard)
			{
				card.enabled = true;
				card.GetComponent<Renderer>().enabled = true;
			}
			return this;
		}
		public int points = 0;
		public int tempPoints = 0;
		public CardStatus cardStatus = CardStatus.NotUpsideDown;
		public Rank substituteRank = Rank.NotSpecified;
		public Zodiac substituteZodiac = Zodiac.None;
		public Suit substituteSuit = Suit.NotSpecified;
		public bool isInZodiacSequence = false;
		public bool wasFacingUp = false;
				
	}
	[System.Serializable]
	public class PlaceholderSnapshot:ItemSnapshot
	{
		public Behaviour behaviour = Behaviour.Normal;
		public List<CardSnapshot> cards = new List<CardSnapshot>();
		public PlaceholderSnapshot Save(Placeholder placeholder)
		{
			cards.Clear();
			foreach(Card card in placeholder.cards)
			{
				CardSnapshot snapshot = new CardSnapshot();
				cards.Add (snapshot.Save (card));
			}
			index = PlaceholderManager.manager.allPlaceholders.IndexOf (placeholder);
			behaviour = placeholder.behaviour;
			return this;
		}
		override public void Restore()
		{
			Game.game.cardInHand = null;
			Placeholder placeholder = PlaceholderManager.manager.allPlaceholders[index];
			placeholder.cards.Clear ();
			foreach(var snapshot in cards)
			{
				Card card = snapshot.GetRestoreCard();
				placeholder.cards.Add (card);
				
			}
			placeholder.Regroup();	
			placeholder.RestoreBehaviour(behaviour);
		}
	}
}

